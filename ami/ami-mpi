#!/bin/bash -eu

usage() {
    # echo "Usage: $0 [ -n WORKERS ] [ -N WORKERS_PER_NODE ] [ -p BASE_PORT] psana://<exp>:<run>" 1>&2
    echo "Usage: $0 [ -n WORKERS ] [ -p BASE_PORT] psana://<exp>:<run>" 1>&2
}

NUMARGS=$#

if [ $NUMARGS -lt 3 ]; then
    usage
    exit 1
fi

workers=1
# workers_per_node=1
heartbeat=10
port=5555
worker_args=""

while getopts n:N:p:b:f: flag
do
    case "${flag}" in
        n) workers=${OPTARG};;
        # N) workers_per_node=${OPTARG};;
        b) heartbeat=${OPTARG};;
        p) port=${OPTARG};;
        f) worker_args="$worker_args -f ""${OPTARG}";;
    esac
done

hosts=`uname -n`
worker_nodes=${SLURM_JOB_NODELIST:-$hosts}
num_worker_nodes=${SLURM_NNODES:-1}
ranks=$(( $workers * $num_worker_nodes + 2 ))
# ranks_per_node=$(( $workers_per_node ))

# if [ $workers -lt 3 ]; then
#     echo "need at least 3 workers"
#     exit 1
# fi

if [ $num_worker_nodes -gt 1 ]; then
    echo "ami-mpi currently only supports 1 node"
    exit 1
fi

shift $(($OPTIND - 1))
rest=$@
echo $rest
manager=`uname -n`
echo "workers: $workers"
echo "worker nodes: $worker_nodes"
echo "num worker nodes: $num_worker_nodes"
# echo "workers per node: $workers_per_node";
echo "manager: $manager";

ami-manager -n $workers -N $num_worker_nodes -p $port &
MANAGER_PID=$!

ami-global -N 0 -n $num_worker_nodes -H $manager -p $port &
GLOBAL_PID=$!

ami-node -N 0 -n $workers -H $manager -p $port -C $manager &
COLLECTOR_PID=$!

mpirun -n $ranks -N $ranks -x LD_LIBRARY_PATH -x PYTHONPATH -x PATH ami-remote -p $port -H $manager -b $heartbeat $worker_args -f repeat=true $rest &!
WORKER_PID=$!

echo "manager: $MANAGER_PID";
echo "global: $GLOBAL_PID";
echo "localCollector: $COLLECTOR_PID";
echo "worker: $WORKER_PID";

trap onexit INT
function onexit() {
    kill $MANAGER_PID
    kill $GLOBAL_PID
    kill $COLLECTOR_PID
    kill $WORKER_PID
}

ami-client -p $port -H $manager
onexit
